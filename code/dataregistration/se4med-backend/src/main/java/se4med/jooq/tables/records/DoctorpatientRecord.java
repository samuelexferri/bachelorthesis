/*
 * This file is generated by jOOQ.
 */
package se4med.jooq.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import se4med.jooq.tables.Doctorpatient;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DoctorpatientRecord extends UpdatableRecordImpl<DoctorpatientRecord> implements Record4<String, String, String, String> {

    private static final long serialVersionUID = -2074653379;

    /**
     * Setter for <code>se4med.doctorpatient.emaildoctor</code>. questa tabella indica per ogni utente quale dottore può consultare i dati delle applicazioni, inoltre per ogni dottore indica quale applicazioni può consultare.

dottore che può consultare i dati delle app -&gt; FK

se l'email della tabella doctor viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public void setEmaildoctor(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>se4med.doctorpatient.emaildoctor</code>. questa tabella indica per ogni utente quale dottore può consultare i dati delle applicazioni, inoltre per ogni dottore indica quale applicazioni può consultare.

dottore che può consultare i dati delle app -&gt; FK

se l'email della tabella doctor viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public String getEmaildoctor() {
        return (String) get(0);
    }

    /**
     * Setter for <code>se4med.doctorpatient.emailpatient</code>. email utente per identificare l'utente che autorizza il dottore -&gt; FK

se l'email della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public void setEmailpatient(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>se4med.doctorpatient.emailpatient</code>. email utente per identificare l'utente che autorizza il dottore -&gt; FK

se l'email della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public String getEmailpatient() {
        return (String) get(1);
    }

    /**
     * Setter for <code>se4med.doctorpatient.username</code>. username per identificare l'utete che autorizza il dottore in modo univoco -&gt; FK

se lo user della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public void setUsername(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>se4med.doctorpatient.username</code>. username per identificare l'utete che autorizza il dottore in modo univoco -&gt; FK

se lo user della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public String getUsername() {
        return (String) get(2);
    }

    /**
     * Setter for <code>se4med.doctorpatient.idapp</code>. idapp per la quale il dottore è autorizzato a visualizzare i dati del paziente -&gt; FK

se l'id della tabella application viene aggiornato, viene aggiornato anche idapp
se l'id della tabella application viene cancellato e c'è un record che contiene quell'id, non viene permessa la cancellazione dell'applicazione

     */
    public void setIdapp(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>se4med.doctorpatient.idapp</code>. idapp per la quale il dottore è autorizzato a visualizzare i dati del paziente -&gt; FK

se l'id della tabella application viene aggiornato, viene aggiornato anche idapp
se l'id della tabella application viene cancellato e c'è un record che contiene quell'id, non viene permessa la cancellazione dell'applicazione

     */
    public String getIdapp() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record4<String, String, String, String> key() {
        return (Record4) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Doctorpatient.DOCTORPATIENT.EMAILDOCTOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Doctorpatient.DOCTORPATIENT.EMAILPATIENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Doctorpatient.DOCTORPATIENT.USERNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Doctorpatient.DOCTORPATIENT.IDAPP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getEmaildoctor();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getEmailpatient();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getUsername();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getIdapp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getEmaildoctor();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getEmailpatient();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getUsername();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getIdapp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoctorpatientRecord value1(String value) {
        setEmaildoctor(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoctorpatientRecord value2(String value) {
        setEmailpatient(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoctorpatientRecord value3(String value) {
        setUsername(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoctorpatientRecord value4(String value) {
        setIdapp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoctorpatientRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DoctorpatientRecord
     */
    public DoctorpatientRecord() {
        super(Doctorpatient.DOCTORPATIENT);
    }

    /**
     * Create a detached, initialised DoctorpatientRecord
     */
    public DoctorpatientRecord(String emaildoctor, String emailpatient, String username, String idapp) {
        super(Doctorpatient.DOCTORPATIENT);

        set(0, emaildoctor);
        set(1, emailpatient);
        set(2, username);
        set(3, idapp);
    }
}
