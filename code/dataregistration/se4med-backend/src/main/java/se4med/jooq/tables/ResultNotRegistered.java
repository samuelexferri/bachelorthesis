/*
 * This file is generated by jOOQ.
 */
package se4med.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;

import se4med.jooq.Indexes;
import se4med.jooq.Keys;
import se4med.jooq.Se4med;
import se4med.jooq.tables.records.ResultNotRegisteredRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResultNotRegistered extends TableImpl<ResultNotRegisteredRecord> {

    private static final long serialVersionUID = -1808349531;

    /**
     * The reference instance of <code>se4med.result_not_registered</code>
     */
    public static final ResultNotRegistered RESULT_NOT_REGISTERED = new ResultNotRegistered();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResultNotRegisteredRecord> getRecordType() {
        return ResultNotRegisteredRecord.class;
    }

    /**
     * The column <code>se4med.result_not_registered.id</code>. questa tabella contiene i risultati

ogni record è identificato da un id univoco
     */
    public final TableField<ResultNotRegisteredRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "questa tabella contiene i risultati\n\nogni record è identificato da un id univoco");

    /**
     * The column <code>se4med.result_not_registered.idapp</code>. fa riferimento all'app con cui si è fatto il test/gioco/.... -&gt; FK

se l'id della tabella application viene aggiornato, viene aggiornato anche idapp
se l'id della tabella application viene cancellato e c'è un record che contiene quell'id, non viene permessa la cancellazione dell'applicazione


     */
    public final TableField<ResultNotRegisteredRecord, String> IDAPP = createField("idapp", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "fa riferimento all'app con cui si è fatto il test/gioco/.... -> FK\n\nse l'id della tabella application viene aggiornato, viene aggiornato anche idapp\nse l'id della tabella application viene cancellato e c'è un record che contiene quell'id, non viene permessa la cancellazione dell'applicazione\n\n");

    /**
     * The column <code>se4med.result_not_registered.dateandtime</code>. data/ora a cui si è giocato
     */
    public final TableField<ResultNotRegisteredRecord, Timestamp> DATEANDTIME = createField("dateandtime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "data/ora a cui si è giocato");

    /**
     * The column <code>se4med.result_not_registered.result</code>. è una stringa contenente informazioni relative al risultato del gioco/trattamento, questa varia in base al gioco/trattamento che si sta registrando
     */
    public final TableField<ResultNotRegisteredRecord, String> RESULT = createField("result", org.jooq.impl.SQLDataType.CLOB, this, "è una stringa contenente informazioni relative al risultato del gioco/trattamento, questa varia in base al gioco/trattamento che si sta registrando");

    /**
     * The column <code>se4med.result_not_registered.idutente</code>.
     */
    public final TableField<ResultNotRegisteredRecord, UInteger> IDUTENTE = createField("idutente", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * Create a <code>se4med.result_not_registered</code> table reference
     */
    public ResultNotRegistered() {
        this(DSL.name("result_not_registered"), null);
    }

    /**
     * Create an aliased <code>se4med.result_not_registered</code> table reference
     */
    public ResultNotRegistered(String alias) {
        this(DSL.name(alias), RESULT_NOT_REGISTERED);
    }

    /**
     * Create an aliased <code>se4med.result_not_registered</code> table reference
     */
    public ResultNotRegistered(Name alias) {
        this(alias, RESULT_NOT_REGISTERED);
    }

    private ResultNotRegistered(Name alias, Table<ResultNotRegisteredRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResultNotRegistered(Name alias, Table<ResultNotRegisteredRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ResultNotRegistered(Table<O> child, ForeignKey<O, ResultNotRegisteredRecord> key) {
        super(child, key, RESULT_NOT_REGISTERED);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Se4med.SE4MED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RESULT_NOT_REGISTERED_FK_RESULT_NOT_REGISTERED_1_IDX, Indexes.RESULT_NOT_REGISTERED_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ResultNotRegisteredRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RESULT_NOT_REGISTERED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ResultNotRegisteredRecord> getPrimaryKey() {
        return Keys.KEY_RESULT_NOT_REGISTERED_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ResultNotRegisteredRecord>> getKeys() {
        return Arrays.<UniqueKey<ResultNotRegisteredRecord>>asList(Keys.KEY_RESULT_NOT_REGISTERED_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ResultNotRegisteredRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ResultNotRegisteredRecord, ?>>asList(Keys.FK_RESULT_NOT_REGISTERED_1);
    }

    public Patientdoc patientdoc() {
        return new Patientdoc(this, Keys.FK_RESULT_NOT_REGISTERED_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultNotRegistered as(String alias) {
        return new ResultNotRegistered(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultNotRegistered as(Name alias) {
        return new ResultNotRegistered(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResultNotRegistered rename(String name) {
        return new ResultNotRegistered(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResultNotRegistered rename(Name name) {
        return new ResultNotRegistered(name, null);
    }
}
