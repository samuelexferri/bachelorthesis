/*
 * This file is generated by jOOQ.
 */
package se4med.jooq.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import se4med.jooq.tables.Results;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResultsRecord extends UpdatableRecordImpl<ResultsRecord> implements Record6<Integer, String, String, String, Timestamp, String> {

    private static final long serialVersionUID = -323461640;

    /**
     * Setter for <code>se4med.results.id</code>. questa tabella contiene i risultati

ogni record è identificato da un id univoco
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>se4med.results.id</code>. questa tabella contiene i risultati

ogni record è identificato da un id univoco
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>se4med.results.idapp</code>. fa riferimento all'app con cui si è fatto il test/gioco/.... -&gt; FK

se l'id della tabella application viene aggiornato, viene aggiornato anche idapp
se l'id della tabella application viene cancellato e c'è un record che contiene quell'id, non viene permessa la cancellazione dell'applicazione


     */
    public void setIdapp(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>se4med.results.idapp</code>. fa riferimento all'app con cui si è fatto il test/gioco/.... -&gt; FK

se l'id della tabella application viene aggiornato, viene aggiornato anche idapp
se l'id della tabella application viene cancellato e c'è un record che contiene quell'id, non viene permessa la cancellazione dell'applicazione


     */
    public String getIdapp() {
        return (String) get(1);
    }

    /**
     * Setter for <code>se4med.results.username</code>. fa riferimento all'utente che ha effettuato il risultato -&gt; FK

se lo user della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore

     */
    public void setUsername(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>se4med.results.username</code>. fa riferimento all'utente che ha effettuato il risultato -&gt; FK

se lo user della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore

     */
    public String getUsername() {
        return (String) get(2);
    }

    /**
     * Setter for <code>se4med.results.emailpatient</code>. fa riferimento all'utente che ha effettuato il risultato -&gt; FK

se l'email della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore

     */
    public void setEmailpatient(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>se4med.results.emailpatient</code>. fa riferimento all'utente che ha effettuato il risultato -&gt; FK

se l'email della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore

     */
    public String getEmailpatient() {
        return (String) get(3);
    }

    /**
     * Setter for <code>se4med.results.dateandtime</code>. data/ora a cui si è giocato
     */
    public void setDateandtime(Timestamp value) {
        set(4, value);
    }

    /**
     * Getter for <code>se4med.results.dateandtime</code>. data/ora a cui si è giocato
     */
    public Timestamp getDateandtime() {
        return (Timestamp) get(4);
    }

    /**
     * Setter for <code>se4med.results.result</code>. è una stringa contenente informazioni relative al risultato del gioco/trattamento, questa varia in base al gioco/trattamento che si sta registrando
     */
    public void setResult(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>se4med.results.result</code>. è una stringa contenente informazioni relative al risultato del gioco/trattamento, questa varia in base al gioco/trattamento che si sta registrando
     */
    public String getResult() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Integer, String, String, String, Timestamp, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Integer, String, String, String, Timestamp, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Results.RESULTS.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Results.RESULTS.IDAPP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Results.RESULTS.USERNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Results.RESULTS.EMAILPATIENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field5() {
        return Results.RESULTS.DATEANDTIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Results.RESULTS.RESULT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getIdapp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getUsername();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getEmailpatient();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component5() {
        return getDateandtime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getResult();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getIdapp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getUsername();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getEmailpatient();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value5() {
        return getDateandtime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getResult();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultsRecord value2(String value) {
        setIdapp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultsRecord value3(String value) {
        setUsername(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultsRecord value4(String value) {
        setEmailpatient(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultsRecord value5(Timestamp value) {
        setDateandtime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultsRecord value6(String value) {
        setResult(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResultsRecord values(Integer value1, String value2, String value3, String value4, Timestamp value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ResultsRecord
     */
    public ResultsRecord() {
        super(Results.RESULTS);
    }

    /**
     * Create a detached, initialised ResultsRecord
     */
    public ResultsRecord(Integer id, String idapp, String username, String emailpatient, Timestamp dateandtime, String result) {
        super(Results.RESULTS);

        set(0, id);
        set(1, idapp);
        set(2, username);
        set(3, emailpatient);
        set(4, dateandtime);
        set(5, result);
    }
}
