/*
 * This file is generated by jOOQ.
 */
package se4med.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import se4med.jooq.Indexes;
import se4med.jooq.Keys;
import se4med.jooq.Se4med;
import se4med.jooq.tables.records.ResultsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Results extends TableImpl<ResultsRecord> {

    private static final long serialVersionUID = -1971051963;

    /**
     * The reference instance of <code>se4med.results</code>
     */
    public static final Results RESULTS = new Results();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResultsRecord> getRecordType() {
        return ResultsRecord.class;
    }

    /**
     * The column <code>se4med.results.id</code>. questa tabella contiene i risultati

ogni record è identificato da un id univoco
     */
    public final TableField<ResultsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "questa tabella contiene i risultati\n\nogni record è identificato da un id univoco");

    /**
     * The column <code>se4med.results.idapp</code>. fa riferimento all'app con cui si è fatto il test/gioco/.... -&gt; FK

se l'id della tabella application viene aggiornato, viene aggiornato anche idapp
se l'id della tabella application viene cancellato e c'è un record che contiene quell'id, non viene permessa la cancellazione dell'applicazione


     */
    public final TableField<ResultsRecord, String> IDAPP = createField("idapp", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "fa riferimento all'app con cui si è fatto il test/gioco/.... -> FK\n\nse l'id della tabella application viene aggiornato, viene aggiornato anche idapp\nse l'id della tabella application viene cancellato e c'è un record che contiene quell'id, non viene permessa la cancellazione dell'applicazione\n\n");

    /**
     * The column <code>se4med.results.username</code>. fa riferimento all'utente che ha effettuato il risultato -&gt; FK

se lo user della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore

     */
    public final TableField<ResultsRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "fa riferimento all'utente che ha effettuato il risultato -> FK\n\nse lo user della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore\n");

    /**
     * The column <code>se4med.results.emailpatient</code>. fa riferimento all'utente che ha effettuato il risultato -&gt; FK

se l'email della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore

     */
    public final TableField<ResultsRecord, String> EMAILPATIENT = createField("emailpatient", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "fa riferimento all'utente che ha effettuato il risultato -> FK\n\nse l'email della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore\n");

    /**
     * The column <code>se4med.results.dateandtime</code>. data/ora a cui si è giocato
     */
    public final TableField<ResultsRecord, Timestamp> DATEANDTIME = createField("dateandtime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "data/ora a cui si è giocato");

    /**
     * The column <code>se4med.results.result</code>. è una stringa contenente informazioni relative al risultato del gioco/trattamento, questa varia in base al gioco/trattamento che si sta registrando
     */
    public final TableField<ResultsRecord, String> RESULT = createField("result", org.jooq.impl.SQLDataType.CLOB, this, "è una stringa contenente informazioni relative al risultato del gioco/trattamento, questa varia in base al gioco/trattamento che si sta registrando");

    /**
     * Create a <code>se4med.results</code> table reference
     */
    public Results() {
        this(DSL.name("results"), null);
    }

    /**
     * Create an aliased <code>se4med.results</code> table reference
     */
    public Results(String alias) {
        this(DSL.name(alias), RESULTS);
    }

    /**
     * Create an aliased <code>se4med.results</code> table reference
     */
    public Results(Name alias) {
        this(alias, RESULTS);
    }

    private Results(Name alias, Table<ResultsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Results(Name alias, Table<ResultsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Results(Table<O> child, ForeignKey<O, ResultsRecord> key) {
        super(child, key, RESULTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Se4med.SE4MED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RESULTS_APPRESULTS_IDX, Indexes.RESULTS_PRIMARY, Indexes.RESULTS_USERNAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ResultsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RESULTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ResultsRecord> getPrimaryKey() {
        return Keys.KEY_RESULTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ResultsRecord>> getKeys() {
        return Arrays.<UniqueKey<ResultsRecord>>asList(Keys.KEY_RESULTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ResultsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ResultsRecord, ?>>asList(Keys.APPRESULTS, Keys.RESULTS_IBFK_1);
    }

    public Application application() {
        return new Application(this, Keys.APPRESULTS);
    }

    public Patient patient() {
        return new Patient(this, Keys.RESULTS_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Results as(String alias) {
        return new Results(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Results as(Name alias) {
        return new Results(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Results rename(String name) {
        return new Results(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Results rename(Name name) {
        return new Results(name, null);
    }
}
