/*
 * This file is generated by jOOQ.
 */
package se4med.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import se4med.jooq.Indexes;
import se4med.jooq.Keys;
import se4med.jooq.Se4med;
import se4med.jooq.tables.records.DoctorRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Doctor extends TableImpl<DoctorRecord> {

    private static final long serialVersionUID = 1559812546;

    /**
     * The reference instance of <code>se4med.doctor</code>
     */
    public static final Doctor DOCTOR = new Doctor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DoctorRecord> getRecordType() {
        return DoctorRecord.class;
    }

    /**
     * The column <code>se4med.doctor.email</code>. questa tabella memorizza i dottori che si registrano al sito. Devono fornire email, nome, cognome e password.
     */
    public final TableField<DoctorRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "questa tabella memorizza i dottori che si registrano al sito. Devono fornire email, nome, cognome e password.");

    /**
     * Create a <code>se4med.doctor</code> table reference
     */
    public Doctor() {
        this(DSL.name("doctor"), null);
    }

    /**
     * Create an aliased <code>se4med.doctor</code> table reference
     */
    public Doctor(String alias) {
        this(DSL.name(alias), DOCTOR);
    }

    /**
     * Create an aliased <code>se4med.doctor</code> table reference
     */
    public Doctor(Name alias) {
        this(alias, DOCTOR);
    }

    private Doctor(Name alias, Table<DoctorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Doctor(Name alias, Table<DoctorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Doctor(Table<O> child, ForeignKey<O, DoctorRecord> key) {
        super(child, key, DOCTOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Se4med.SE4MED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOCTOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DoctorRecord> getPrimaryKey() {
        return Keys.KEY_DOCTOR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DoctorRecord>> getKeys() {
        return Arrays.<UniqueKey<DoctorRecord>>asList(Keys.KEY_DOCTOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DoctorRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DoctorRecord, ?>>asList(Keys.EMAILDOC);
    }

    public User user() {
        return new User(this, Keys.EMAILDOC);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Doctor as(String alias) {
        return new Doctor(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Doctor as(Name alias) {
        return new Doctor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Doctor rename(String name) {
        return new Doctor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Doctor rename(Name name) {
        return new Doctor(name, null);
    }
}
