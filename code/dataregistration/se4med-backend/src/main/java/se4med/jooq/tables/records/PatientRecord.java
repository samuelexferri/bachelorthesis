/*
 * This file is generated by jOOQ.
 */
package se4med.jooq.tables.records;


import java.sql.Date;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import se4med.jooq.tables.Patient;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PatientRecord extends UpdatableRecordImpl<PatientRecord> implements Record6<String, String, String, Date, String, String> {

    private static final long serialVersionUID = -563042555;

    /**
     * Setter for <code>se4med.patient.username</code>. L'utente si registra fornendo UserName, Surname, Name, DataOfBirth, EmailUser e Password.
Nel caso di prima registrazione (l'email non è mai stata registrata), viene anche inserita un'istanza nella tabella EMAIL. Se chi fa il test non è il proprietario dell'email devono essere forniti anche nome e cognome 
del proprietario dell'email e vengono salvati nella tabelle Email. Nel caso in cui il proprietario dell'email corrisponda all'utente registrato, vengono riportati nome e cognome nella tabella Email. Questo perché se 
gli utenti sono bambini e utilizzano l'email del genitore si vuole memorizzare nome e cognome del genitore.
Una volta creato un utente con email X, per poter creare altri utenti è necessario prima fare il login e successivamente permettere l'inserimento di altri utenti.
Il login avviene nel seguente modo:
Inserimento email e password
Se è associato più di un utente viene mostrato
     */
    public void setUsername(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>se4med.patient.username</code>. L'utente si registra fornendo UserName, Surname, Name, DataOfBirth, EmailUser e Password.
Nel caso di prima registrazione (l'email non è mai stata registrata), viene anche inserita un'istanza nella tabella EMAIL. Se chi fa il test non è il proprietario dell'email devono essere forniti anche nome e cognome 
del proprietario dell'email e vengono salvati nella tabelle Email. Nel caso in cui il proprietario dell'email corrisponda all'utente registrato, vengono riportati nome e cognome nella tabella Email. Questo perché se 
gli utenti sono bambini e utilizzano l'email del genitore si vuole memorizzare nome e cognome del genitore.
Una volta creato un utente con email X, per poter creare altri utenti è necessario prima fare il login e successivamente permettere l'inserimento di altri utenti.
Il login avviene nel seguente modo:
Inserimento email e password
Se è associato più di un utente viene mostrato
     */
    public String getUsername() {
        return (String) get(0);
    }

    /**
     * Setter for <code>se4med.patient.surname</code>.
     */
    public void setSurname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>se4med.patient.surname</code>.
     */
    public String getSurname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>se4med.patient.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>se4med.patient.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>se4med.patient.dateofbirth</code>.
     */
    public void setDateofbirth(Date value) {
        set(3, value);
    }

    /**
     * Getter for <code>se4med.patient.dateofbirth</code>.
     */
    public Date getDateofbirth() {
        return (Date) get(3);
    }

    /**
     * Setter for <code>se4med.patient.emailpatient</code>. fa riferiemento all'email con cui l'utente è registrato

se l'email della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public void setEmailpatient(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>se4med.patient.emailpatient</code>. fa riferiemento all'email con cui l'utente è registrato

se l'email della tabella user viene cancellata/modificata, si cancellano/modificano tutti i record che contengono quel valore
     */
    public String getEmailpatient() {
        return (String) get(4);
    }

    /**
     * Setter for <code>se4med.patient.settings</code>.
     */
    public void setSettings(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>se4med.patient.settings</code>.
     */
    public String getSettings() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, String, String, Date, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, String, String, Date, String, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Patient.PATIENT.USERNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Patient.PATIENT.SURNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Patient.PATIENT.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Date> field4() {
        return Patient.PATIENT.DATEOFBIRTH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Patient.PATIENT.EMAILPATIENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Patient.PATIENT.SETTINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getUsername();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getSurname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Date component4() {
        return getDateofbirth();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getEmailpatient();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getSettings();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getUsername();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getSurname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Date value4() {
        return getDateofbirth();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getEmailpatient();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getSettings();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PatientRecord value1(String value) {
        setUsername(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PatientRecord value2(String value) {
        setSurname(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PatientRecord value3(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PatientRecord value4(Date value) {
        setDateofbirth(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PatientRecord value5(String value) {
        setEmailpatient(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PatientRecord value6(String value) {
        setSettings(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PatientRecord values(String value1, String value2, String value3, Date value4, String value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PatientRecord
     */
    public PatientRecord() {
        super(Patient.PATIENT);
    }

    /**
     * Create a detached, initialised PatientRecord
     */
    public PatientRecord(String username, String surname, String name, Date dateofbirth, String emailpatient, String settings) {
        super(Patient.PATIENT);

        set(0, username);
        set(1, surname);
        set(2, name);
        set(3, dateofbirth);
        set(4, emailpatient);
        set(5, settings);
    }
}
